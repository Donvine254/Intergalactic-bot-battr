{"ast":null,"code":"var _jsxFileName = \"/home/donvine/Development/Phase-2/Intergalactic-bot-battr/src/components/Botspage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport Filter from \"./Filter\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\n\n//initialize bot url for data fetching\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrl = \"http://localhost:8002/bots\";\n\n//if cloning this repo use \"https://api.npoint.io/f2dab3b71d583e4dbdef/bots\" if the npm server is not initialized\n\nconst BotsPage = () => {\n  _s();\n  const [bots, setBots] = useState([]);\n  const [swarm, setSwarm] = useState([]);\n  const [displayedBots, setDisplayedBots] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(\"All\");\n  useEffect(() => {\n    const fetchBots = async () => {\n      try {\n        const response = await axios.get(baseUrl);\n        const data = response.data;\n        setBots(data);\n        setDisplayedBots(data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    fetchBots();\n  }, []);\n  //prevent enlisting a bot twice or adding bots of the same class\n\n  const enlistBot = bot => {\n    const botClass = bot.bot_class;\n    const existingBotClass = swarm.find(botInSwarm => botInSwarm.bot_class === botClass);\n    if (!swarm.includes(bot) && !existingBotClass) {\n      setSwarm(prevBots => [...prevBots, bot]);\n      setDisplayedBots(displayedBots.filter(displayedBot => displayedBot.id !== bot.id));\n      Swal.fire({\n        title: \"Bot Enlisted\",\n        text: `A ${bot}${bot.name} has been added to your army.`,\n        icon: \"success\",\n        button: \"OK\",\n        timer: 3000\n      });\n    } else {\n      Swal.fire({\n        title: \"Opps!\",\n        text: \"You cannot add two bots of the same class, choose wisely!\",\n        icon: \"warning\",\n        showCancelButton: true,\n        confirmButtonColor: \"#00706e\",\n        cancelButtonColor: \"#ff5154\",\n        backdrop: `rgba(112, 71, 109, 0.9)\n        url(\"https://static.independent.co.uk/s3fs-public/thumbnails/image/2019/03/27/15/robot-army.jpg\")\n        center no-repeat`,\n        confirmButtonText: \"I Understand!\",\n        timer: 3000\n      });\n    }\n  };\n  const removeBot = bot => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"This bot will serve you well!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#00706e\",\n      cancelButtonColor: \"#ff5154\",\n      confirmButtonText: \"Yes, I do not want it!\",\n      timer: 3000\n    }).then(result => {\n      if (result.isConfirmed) {\n        setSwarm(prevBots => prevBots.filter(yourBot => yourBot.id !== bot.id));\n        setDisplayedBots(prevDisplayedBots => [...prevDisplayedBots, bot]);\n      }\n    });\n  };\n  //function to discharge bots and delete them from backend\n  function dischargeBot(id) {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"This action will permanently remove the bot\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#ff5154\",\n      cancelButtonColor: \"#00706e\",\n      cancelButtonText: \"No, I made a mistake\",\n      confirmButtonText: \"Bye Bye Bot!\"\n    }).then(result => {\n      if (result.isConfirmed) {\n        try {\n          fetch(`${baseUrl}/${id}`, {\n            method: \"DELETE\"\n          }).then(() => {\n            setBots(prevBots => prevBots.filter(prevBot => prevBot.id !== id));\n            setSwarm(prevSwarm => prevSwarm.filter(bot => bot.id !== id));\n            setDisplayedBots(prevDisplayedBots => prevDisplayedBots.filter(bot => bot.id !== id));\n          });\n        } catch (error) {\n          console.log(\"An error occurred during the API request:\", error);\n        }\n      }\n    });\n  }\n  //handle bot filtering by class\n  function handleClassFilterChange(event) {\n    const newCategory = event.target.value;\n    setSelectedCategory(newCategory);\n    const filteredBots = bots.filter(bot => {\n      if (newCategory === \"All\") {\n        return true;\n      }\n      return bot.bot_class === newCategory;\n    });\n    setDisplayedBots(filteredBots);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n      bots: swarm,\n      removeBot: removeBot,\n      dischargeBot: dischargeBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      selectedCategory: selectedCategory,\n      onFilterChange: handleClassFilterChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n      bots: displayedBots,\n      onEnlist: enlistBot,\n      dischargeBot: dischargeBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(BotsPage, \"JLFNzpefdjSYg98LXrqdsRfneAw=\");\n_c = BotsPage;\nexport default BotsPage;\nvar _c;\n$RefreshReg$(_c, \"BotsPage\");","map":{"version":3,"names":["React","useState","useEffect","YourBotArmy","BotCollection","Filter","axios","Swal","jsxDEV","_jsxDEV","baseUrl","BotsPage","_s","bots","setBots","swarm","setSwarm","displayedBots","setDisplayedBots","selectedCategory","setSelectedCategory","fetchBots","response","get","data","error","console","log","message","enlistBot","bot","botClass","bot_class","existingBotClass","find","botInSwarm","includes","prevBots","filter","displayedBot","id","fire","title","text","name","icon","button","timer","showCancelButton","confirmButtonColor","cancelButtonColor","backdrop","confirmButtonText","removeBot","then","result","isConfirmed","yourBot","prevDisplayedBots","dischargeBot","cancelButtonText","fetch","method","prevBot","prevSwarm","handleClassFilterChange","event","newCategory","target","value","filteredBots","children","fileName","_jsxFileName","lineNumber","columnNumber","onFilterChange","onEnlist","_c","$RefreshReg$"],"sources":["/home/donvine/Development/Phase-2/Intergalactic-bot-battr/src/components/Botspage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport Filter from \"./Filter\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\n\n//initialize bot url for data fetching\nconst baseUrl = \"http://localhost:8002/bots\";\n\n//if cloning this repo use \"https://api.npoint.io/f2dab3b71d583e4dbdef/bots\" if the npm server is not initialized\n\nconst BotsPage = () => {\n  const [bots, setBots] = useState([]);\n  const [swarm, setSwarm] = useState([]);\n  const [displayedBots, setDisplayedBots] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(\"All\");\n\n  useEffect(() => {\n    const fetchBots = async () => {\n      try {\n        const response = await axios.get(baseUrl);\n        const data = response.data;\n        setBots(data);\n        setDisplayedBots(data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n\n    fetchBots();\n  }, []);\n //prevent enlisting a bot twice or adding bots of the same class\n\n  const enlistBot = (bot) => {\n    const botClass = bot.bot_class;\n    const existingBotClass = swarm.find((botInSwarm) => botInSwarm.bot_class === botClass)\n    if (!swarm.includes(bot) && !existingBotClass) {\n      setSwarm((prevBots) => [...prevBots, bot]);\n      setDisplayedBots(\n        displayedBots.filter((displayedBot) => displayedBot.id !== bot.id)\n      );\n\n      Swal.fire({\n        title: \"Bot Enlisted\",\n        text: `A ${bot}${bot.name} has been added to your army.`,\n        icon: \"success\",\n        button: \"OK\",\n        timer: 3000,\n      });\n    } else {\n      Swal.fire({\n        title: \"Opps!\",\n        text: \"You cannot add two bots of the same class, choose wisely!\",\n        icon: \"warning\",\n        showCancelButton: true,\n        confirmButtonColor: \"#00706e\",\n        cancelButtonColor: \"#ff5154\",\n        backdrop: `rgba(112, 71, 109, 0.9)\n        url(\"https://static.independent.co.uk/s3fs-public/thumbnails/image/2019/03/27/15/robot-army.jpg\")\n        center no-repeat`,\n        confirmButtonText: \"I Understand!\",\n        timer: 3000,\n      });\n    }\n  };\n\n  const removeBot = (bot) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"This bot will serve you well!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#00706e\",\n      cancelButtonColor: \"#ff5154\",\n      confirmButtonText: \"Yes, I do not want it!\",\n      timer: 3000,\n    }).then((result) => {\n      if (result.isConfirmed) {\n        setSwarm((prevBots) =>\n          prevBots.filter((yourBot) => yourBot.id !== bot.id)\n        );\n        setDisplayedBots((prevDisplayedBots) => [...prevDisplayedBots, bot]);\n      }\n    });\n  };\n //function to discharge bots and delete them from backend\n  function dischargeBot(id) {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"This action will permanently remove the bot\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#ff5154\",\n      cancelButtonColor: \"#00706e\",\n      cancelButtonText: \"No, I made a mistake\",\n      confirmButtonText: \"Bye Bye Bot!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        try {\n          fetch(`${baseUrl}/${id}`, {\n            method: \"DELETE\",\n          }).then(() => {\n            setBots((prevBots) =>\n              prevBots.filter((prevBot) => prevBot.id !== id)\n            );\n            setSwarm((prevSwarm) => prevSwarm.filter((bot) => bot.id !== id));\n            setDisplayedBots((prevDisplayedBots) =>\n              prevDisplayedBots.filter((bot) => bot.id !== id)\n            );\n          });\n        } catch (error) {\n          console.log(\"An error occurred during the API request:\", error);\n        }\n      }\n    });\n  }\n  //handle bot filtering by class\n  function handleClassFilterChange(event) {\n    const newCategory = event.target.value;\n    setSelectedCategory(newCategory);\n\n    const filteredBots = bots.filter((bot) => {\n      if (newCategory === \"All\") {\n        return true;\n      }\n      return bot.bot_class === newCategory;\n    });\n\n    setDisplayedBots(filteredBots);\n  }\n\n  return (\n    <div>\n      <YourBotArmy\n        bots={swarm}\n        removeBot={removeBot}\n        dischargeBot={dischargeBot}\n      />\n      <Filter\n        selectedCategory={selectedCategory}\n        onFilterChange={handleClassFilterChange}\n      />\n      <BotCollection\n        bots={displayedBots}\n        onEnlist={enlistBot}\n        dischargeBot={dischargeBot}\n      />\n    </div>\n  );\n};\n\nexport default BotsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}