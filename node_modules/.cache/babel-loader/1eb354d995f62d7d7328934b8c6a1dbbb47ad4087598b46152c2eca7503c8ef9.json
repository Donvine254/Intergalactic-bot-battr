{"ast":null,"code":"var _jsxFileName = \"/home/donvine/Development/Intergalactic-Bot-Battlr/code-challenge/src/components/Botspage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport Filter from \"./Filter\";\nimport Swal from \"sweetalert2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrl = \"http://localhost:8002/bots\";\nconst BotsPage = () => {\n  _s();\n  const [bots, setBots] = useState([]);\n  const [swarm, setSwarm] = useState([]);\n  const [selectedBotClasses, setSelectedBotClasses] = useState([]);\n  const [displayedBots, setDisplayedBots] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(\"All\");\n  useEffect(() => {\n    const fetchBots = async () => {\n      try {\n        const response = await fetch(baseUrl);\n        const data = await response.json();\n        setBots(data);\n        setDisplayedBots(data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    fetchBots();\n  }, []);\n  const enlistBot = bot => {\n    if (!swarm.includes(bot) && !selectedBotClasses.includes(bot.bot_class)) {\n      setSwarm(prevBots => [...prevBots, bot]);\n      setSelectedBotClasses(bot.bot_class);\n      console.log(selectedBotClasses);\n      setDisplayedBots(displayedBots.filter(displayedBot => displayedBot.id !== bot.id));\n      Swal.fire({\n        title: \"Bot Enlisted\",\n        text: `${bot.name} has been added to your army.`,\n        icon: \"success\",\n        button: \"OK\",\n        timer: 3000\n      });\n    } else {\n      Swal.fire({\n        title: \"Opps!\",\n        text: \"You cannot add two bots of the same class, choose wisely!\",\n        icon: \"warning\",\n        showCancelButton: true,\n        confirmButtonColor: \"#00706e\",\n        cancelButtonColor: \"#ff5154\",\n        backdrop: `rgba(112, 71, 109, 0.9)\n        url(\"https://static.independent.co.uk/s3fs-public/thumbnails/image/2019/03/27/15/robot-army.jpg\")\n        center no-repeat`,\n        confirmButtonText: \"I Understand!\",\n        timer: 3000\n      });\n    }\n  };\n  const removeBot = bot => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"This bot will serve you well!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#00706e\",\n      cancelButtonColor: \"#ff5154\",\n      confirmButtonText: \"Yes, I do not want it!\",\n      timer: 3000\n    }).then(result => {\n      if (result.isConfirmed) {\n        setSwarm(prevBots => prevBots.filter(yourBot => yourBot.id !== bot.id));\n        setDisplayedBots(prevDisplayedBots => [...prevDisplayedBots, bot]);\n        setSelectedBotClasses(selectedBotClasses.filter(yourBot => yourBot.bot_class !== bot.bot_class));\n      }\n    });\n  };\n  function dischargeBot(bot) {\n    //the API is not responding for now...\n    try {\n      fetch(`${baseUrl}/${bot.id}`, {\n        method: \"DELETE\"\n      }).then(() => {\n        setBots(prevBots => prevBots.filter(prevBot => prevBot.id !== bot.id));\n        setSelectedBotClasses(prevSelectedBotClasses => prevSelectedBotClasses.filter(selectedBot => selectedBot.id !== bot.bot_class));\n      });\n    } catch (error) {\n      console.log(\"An error occurred during the API request:\", error);\n    }\n  }\n  //handle bot filtering by class\n  function handleClassFilterChange(event) {\n    const newCategory = event.target.value;\n    setSelectedCategory(newCategory);\n    const filteredBots = bots.filter(bot => {\n      if (newCategory === \"All\") {\n        return true;\n      }\n      return bot.bot_class === newCategory;\n    });\n    setDisplayedBots(filteredBots);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n      bots: swarm,\n      removeBot: removeBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      selectedCategory: selectedCategory,\n      onFilterChange: handleClassFilterChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n      bots: displayedBots,\n      onEnlist: enlistBot,\n      onDischarge: dischargeBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(BotsPage, \"9Yct0pSuqUE4W/jrp0+irFFCyD4=\");\n_c = BotsPage;\nexport default BotsPage;\nvar _c;\n$RefreshReg$(_c, \"BotsPage\");","map":{"version":3,"names":["React","useState","useEffect","YourBotArmy","BotCollection","Filter","Swal","jsxDEV","_jsxDEV","baseUrl","BotsPage","_s","bots","setBots","swarm","setSwarm","selectedBotClasses","setSelectedBotClasses","displayedBots","setDisplayedBots","selectedCategory","setSelectedCategory","fetchBots","response","fetch","data","json","error","console","log","message","enlistBot","bot","includes","bot_class","prevBots","filter","displayedBot","id","fire","title","text","name","icon","button","timer","showCancelButton","confirmButtonColor","cancelButtonColor","backdrop","confirmButtonText","removeBot","then","result","isConfirmed","yourBot","prevDisplayedBots","dischargeBot","method","prevBot","prevSelectedBotClasses","selectedBot","handleClassFilterChange","event","newCategory","target","value","filteredBots","children","fileName","_jsxFileName","lineNumber","columnNumber","onFilterChange","onEnlist","onDischarge","_c","$RefreshReg$"],"sources":["/home/donvine/Development/Intergalactic-Bot-Battlr/code-challenge/src/components/Botspage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport Filter from \"./Filter\";\nimport Swal from \"sweetalert2\";\nconst baseUrl = \"http://localhost:8002/bots\";\n\nconst BotsPage = () => {\n  const [bots, setBots] = useState([]);\n  const [swarm, setSwarm] = useState([]);\n  const [selectedBotClasses, setSelectedBotClasses] = useState([]);\n  const [displayedBots, setDisplayedBots] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(\"All\");\n\n  useEffect(() => {\n    const fetchBots = async () => {\n      try {\n        const response = await fetch(baseUrl);\n        const data = await response.json();\n        setBots(data);\n        setDisplayedBots(data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n\n    fetchBots();\n  }, []);\n\n  const enlistBot = (bot) => {\n    if (\n      !swarm.includes(bot) &&\n      !selectedBotClasses.includes(bot.bot_class)\n    ) {\n      setSwarm((prevBots) => [...prevBots, bot]);\n      setSelectedBotClasses(bot.bot_class);\n      console.log(selectedBotClasses);\n      setDisplayedBots(\n        displayedBots.filter((displayedBot) => displayedBot.id !== bot.id)\n      );\n\n      Swal.fire({\n        title: \"Bot Enlisted\",\n        text: `${bot.name} has been added to your army.`,\n        icon: \"success\",\n        button: \"OK\",\n        timer: 3000,\n      });\n    } else {\n      Swal.fire({\n        title: \"Opps!\",\n        text: \"You cannot add two bots of the same class, choose wisely!\",\n        icon: \"warning\",\n        showCancelButton: true,\n        confirmButtonColor: \"#00706e\",\n        cancelButtonColor: \"#ff5154\",\n        backdrop: `rgba(112, 71, 109, 0.9)\n        url(\"https://static.independent.co.uk/s3fs-public/thumbnails/image/2019/03/27/15/robot-army.jpg\")\n        center no-repeat`,\n        confirmButtonText: \"I Understand!\",\n        timer: 3000,\n      });\n    }\n  };\n\n  const removeBot = (bot) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"This bot will serve you well!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#00706e\",\n      cancelButtonColor: \"#ff5154\",\n      confirmButtonText: \"Yes, I do not want it!\",\n      timer: 3000,\n    }).then((result) => {\n      if (result.isConfirmed) {\n        setSwarm((prevBots) =>\n          prevBots.filter((yourBot) => yourBot.id !== bot.id)\n        );\n        setDisplayedBots((prevDisplayedBots) => [...prevDisplayedBots, bot]);\n        setSelectedBotClasses(selectedBotClasses.filter((yourBot) => yourBot.bot_class !== bot.bot_class));\n      }\n    });\n  };\n  function dischargeBot(bot) {\n    //the API is not responding for now...\n    try {\n      fetch(`${baseUrl}/${bot.id}`, {\n        method: \"DELETE\",\n      }).then(() => {\n        setBots((prevBots) =>\n          prevBots.filter((prevBot) => prevBot.id !== bot.id)\n        );\n        setSelectedBotClasses((prevSelectedBotClasses) =>\n          prevSelectedBotClasses.filter(\n            (selectedBot) => selectedBot.id !== bot.bot_class\n          )\n        );\n      });\n    } catch (error) {\n      console.log(\"An error occurred during the API request:\", error);\n    }\n  }\n  //handle bot filtering by class\n  function handleClassFilterChange(event) {\n    const newCategory = event.target.value;\n    setSelectedCategory(newCategory);\n\n    const filteredBots = bots.filter((bot) => {\n      if (newCategory === \"All\") {\n        return true;\n      }\n      return bot.bot_class === newCategory;\n    });\n\n    setDisplayedBots(filteredBots);\n  }\n\n  return (\n    <div>\n      <YourBotArmy bots={swarm} removeBot={removeBot} />\n      <Filter\n        selectedCategory={selectedCategory}\n        onFilterChange={handleClassFilterChange}\n      />\n      <BotCollection\n        bots={displayedBots}\n        onEnlist={enlistBot}\n        onDischarge={dischargeBot}\n      />\n    </div>\n  );\n};\n\nexport default BotsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}